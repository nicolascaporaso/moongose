<button id="btnToggle">Cargar producto nuevo</button>

<div style="text-align: center;">
  {{#each payload}}
  <div id={{this._id}} style="display: inline-block; margin: 10px; border: 5px solid black;">
    <img src="{{this.thumbnails}}" alt="product image" width="200" height="200">
    <h2>{{this.title}}</h2>
    <p>{{this.description}}</p>
    <p>Precio: {{this.price}}</p>
    <p>Stock: {{this.stock}}</p>

    <button onclick="deleteProduct('{{this._id}}')">Eliminar</button>
    <button onclick="addToCart('{{this._id}}')">AddtoCart</button>
  </div>

  {{/each}}
</div>

<div class="pagination">
  <div><label for=""></label>Products for Pages {{pagination.limit}}</div>
  <div><label for=""></label>Total Products {{pagination.totalDocs}}</div>
  <div><label for=""></label>Total Pages {{pagination.totalPages}}</div>
  <div><label for=""></label>Actual Page {{pagination.page}}</div>

  {{#if pagination.hasPrevPage}}
  <a href="/products?page={{pagination.prevPage}}">
    <div><label for=""></label>PreviousPage {{pagination.prevPage}}</div>
  </a>
  {{/if}}

  {{#if pagination.hasNextPage}}
  <a href="/products?page={{pagination.nextPage}}">
    <div><label for=""></label>NextPage {{pagination.nextPage}}</div>
  </a>
  {{/if}}
</div>

<div id="addNewProduct" class="hidden">
  {{> form}}
</div>

<script>

  const btnToggle = document.getElementById('btnToggle');
  const contentContainer = document.getElementById('addNewProduct');

  // Agrega el evento clic al botón
  btnToggle.addEventListener('click', () => {
    // Cambia la visibilidad del contenido al hacer clic en el botón
    contentContainer.classList.toggle('hidden');
  });


  document.addEventListener("DOMContentLoaded", function (event) {
    getCartSession();
  });

  async function getCartSession() {
    try {
      const response = await fetch('/api/carts/cartid/id', { method: 'get' });
      if (response.ok) {
        const data = await response.json();
        const cartId = data.cartId;
        localStorage.setItem('cartId', cartId);
      } else {
        alert("no se pudo obtener su carrito, intente volver a iniciar sesion")
      }
    } catch (error) {
      console.error('Error:', error);
      // Manejar el error adecuadamente
    }
  }

  function deleteProduct(productId) {
    fetch(`/api/products/${productId}`, {
      method: 'DELETE',
    })
      .then(response => {
        if (response.ok) {
          // Hacer algo si la solicitud fue exitosa
          alert("producto eliminado");
          const element = document.getElementById(productId);
          if (element) {
            element.remove();
          }
        } else {
          alert('Error al eliminar el producto');
        }
      })
      .catch(error => {
        alert('Error de solicitud');
      });
  }

  function addToCart(pid) {
    alert("agregando a cart");
    const cid = localStorage.getItem('cartId');

    fetch(`/api/carts/${cid}/product/${pid}`, {
      method: 'PUT',
      body: JSON.stringify({
        quantity: 1
      }),
      headers: {
        'Content-Type': 'application/json'
      }
    })
      .then(response => {
        if (response.ok) {
          alert(response);
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }

</script>